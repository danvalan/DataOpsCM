name: Create new branch

on:
  workflow_dispatch:
    inputs:
      branchName:
        description: 'Branch name'
        required: true
        type: string
        default: 'dev'
      projectName:
        description: 'Project name'
        required: true
        type: string
        default: 'DEV branch of project ...'
      addUserWithEmail:
        description: 'Add user with email'
        required: false
        type: string

jobs:
  createBranch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Create temp dir
        run: | 
            mkdir temp
            chmod 777 temp
      - name: Show env variables
        run: env
        
      - name: Create temp dir, create create project script without orgId
        if: "${{vars.CM_ORGANIZATION_ID == ''}}"
        run: | 
            cd temp
            echo -e "login\ncreateProject --title \"${{inputs.projectName}}\"\ndumpProject --skipData" > createProjectScript.txt
            cat createProjectScript.txt
            
      - name: Create temp dir, create create project script with orgId
        if: "${{vars.CM_ORGANIZATION_ID != ''}}"
        run: | 
            cd temp
            echo -e "login\ncreateProject --title \"${{inputs.projectName}}\" --organizationId ${vars.CM_ORGANIZATION_ID}\ndumpProject --skipData" > createProjectScript.txt
            cat createProjectScript.txt
            
      - name: Run docker CleverMaps Shell with create project script
        uses: addnab/docker-run-action@v3
        with:
          image: clevermaps/shell:latest
          options: --rm --name cm-shell --pull always --volume ${{ github.workspace }}/temp:/work:z -v ${{ github.workspace }}/temp/createProjectScript.txt:/createProjectScript.txt --env CM_ACCESS_TOKEN=${{ secrets.ACCESSTOKEN }} 
          run: java -jar "${HOME}/${can_shell_filename}" --cmdfile /createProjectScript.txt
          
      - name: Get projectId
        run: | 
            cd temp
            rm createProjectScript.txt
            echo "NEW_PROJECT_ID="$(ls)"" >> $GITHUB_ENV
            
      - name: Create new branch
        uses: peterjgrainger/action-create-branch@v2.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: "refs/heads/${{env.NEW_PROJECT_ID}}/${{inputs.branchName}}"
          
      - name: Install jq
        if: "${{inputs.addUserWithEmail != ''}}"
        run: sudo apt-get install -y jq
        
      - name: Get bearer token
        if: "${{inputs.addUserWithEmail != ''}}"
        id: get-token
        run: |
          response=$(curl -X POST \
                     "https://secure.clevermaps.io/rest/oauth/token" \
                     -H "Content-Type: application/json" \
                     -H "Accept: application/json" \
                     -d '{"refresh_token": "'"${{ secrets.ACCESSTOKEN }}"'"}')
          echo ${response}
          bearer_token=$(echo "${response}" | jq -r '.access_token')
          echo ${bearer_token} >> $GITHUB_ENV
          
      - name: Get account ID
        if: "${{inputs.addUserWithEmail != ''}}"
        id: get-account
        run: |
          response=$(curl -s -X GET "https://secure.clevermaps.io/rest/accounts?email=${{ inputs.addUserWithEmail }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ env.bearer_token }}" \
            -H "Accept: application/json")
          echo $response
          account_id=$(echo "$response" | jq -r '.id')
        env:
          account_id: ${{ steps.get-account.outputs.account_id }}
          
      - name: Add user to project
        if: "${{inputs.addUserWithEmail != ''}}"
        id: add-user
        run: |
          response=$(curl -X POST \
                     "https://secure.clevermaps.io/rest/projects/${{env.NEW_PROJECT_ID}}/members" \
                     -H "Content-Type: application/json" \
                     -H "Authorization: Bearer ${{ env.bearer_token }}" \
                     -H "Accept: application/json" \
                     -d '{"accountId": "${{ env.account_id }}", "role": "ADMIN", "status": "ENABLED"}')
          echo $response
    


   
    
            
            
            
